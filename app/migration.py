# Generated by Django 2.1 on 2018-08-28 15:31
import datetime
import json
import os
import random
import re
from functools import reduce

import pytz
from django.core.files import File
from django.db import migrations

from app.analysis.analyzer import QueryItem
from vocabulary.settings import MEDIA_ROOT, STATICFILES_DIR


def initial_high_frequency(apps, schema_editor):
    need_query_items = []
    with open(os.path.join(MEDIA_ROOT, "file/7000.txt")) as f:
        for line in f.readlines():
            query_item = QueryItem(line.strip(), 0)
            need_query_items.append(query_item)
    items = []
    HighFrequencyWord = apps.get_model("app", "HighFrequencyWord")
    HighFrequencyWord.objects.all().delete()
    for item in need_query_items:
        items.append(HighFrequencyWord(word=item.name))
    # 插入高频词
    HighFrequencyWord.objects.using(schema_editor.connection.alias).bulk_create(items)


def insert_word(apps):
    Vocabulary = apps.get_model("app", "Vocabulary")
    HighFrequencyWord = apps.get_model("app", "HighFrequencyWord")
    file_path = os.path.join(STATICFILES_DIR, "history.json")
    res_path = os.path.join(STATICFILES_DIR, "dict_resources")
    vocabulary_path = os.path.join(MEDIA_ROOT, "vocabulary")
    if os.path.exists(vocabulary_path):
        import shutil
        shutil.rmtree(vocabulary_path)
    dict_items = json.loads(open(file_path, "r", encoding="utf-8").read())
    levels = ["I", "II", "III", "IV", "V", "VI", "VII", "V"]
    Vocabulary.objects.all().delete()
    for dict_item in dict_items:
        description_html = dict_item["description_html"]
        en_output = ""
        if description_html:
            for key, description_items in enumerate(description_html):
                en_output += (
                        "<b><font color=\"#b904af\">▪ <font>%s.</font></font></b>" % levels[key] + "<br>")
                index = 1
                for in_item in description_items:
                    if in_item.startswith("&nbsp;"):
                        in_item = in_item.replace("&nbsp;", " ").strip()
                    en_output += (
                            "&nbsp;&nbsp;&nbsp;&nbsp;<font color=\"#b904af\"><b>%d.</b></font> " % index + in_item.strip() + "<br>")
                    index += 1
        cn_output = ""
        part_main = dict_item["part_main"]
        if part_main:
            for key, part_items in enumerate(part_main):
                cn_output += (
                        "<b><font color=\"#b904af\">▪ <font>%s.</font></font></b>" % levels[key] + "<br>")
                index = 1
                for in_item in part_items:
                    cn_output += (
                            "&nbsp;&nbsp;&nbsp;&nbsp;<font color=\"#b904af\"><b>%s</b></font> " % in_item.strip() + "<br>")
                    index += 1
        if not Vocabulary.objects.filter(word=dict_item["word"]).exists():
            vocabulary = Vocabulary.objects.create(word=dict_item["word"],
                                                   uk_phonetic=dict_item["uk_phonetic"],
                                                   us_phonetic=dict_item["us_phonetic"],
                                                   star=dict_item["star"],
                                                   high_frequency=HighFrequencyWord.objects.filter(
                                                       word=dict_item["word"]).exists(),
                                                   en_desc=en_output,
                                                   cn_desc=cn_output,
                                                   )

            if dict_item["uk_sound"]:
                uk_path = os.path.join(res_path, dict_item["uk_sound"])
                if os.path.exists(uk_path):
                    vocabulary.uk_sound.save(dict_item["uk_sound"], File(open(uk_path, 'rb')))
            if dict_item["us_sound"]:
                us_path = os.path.join(res_path, dict_item["us_sound"])
                if os.path.exists(us_path):
                    vocabulary.us_sound.save(dict_item["us_sound"], File(open(us_path, 'rb')))
            if dict_item["pic"]:
                file_name = os.path.basename(dict_item["pic"])
                pic_path = os.path.join(res_path, file_name)
                if os.path.exists(pic_path):
                    vocabulary.picture.save(file_name, File(open(pic_path, 'rb')))


def forwards_func(apps, schema_editor):
    # 插入7000高频词
    initial_high_frequency(apps, schema_editor)
    # 初始化单词库
    insert_word(apps)


def reverse_func(apps, schema_editor): pass


class Migration(migrations.Migration):
    dependencies = [
        ('app', '0001_initial'),
    ]
    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
